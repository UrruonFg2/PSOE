import subprocess
import re
import tempfile
import os
from core.config_loader import ConfigLoader

class ExploitVerifier:
    def __init__(self):
        self.config = ConfigLoader()
        self.metasploit_path = self.config.get('TOOLS', 'metasploit_path')
        
    def verify_exploit(self, cve_id, target_ip, port):
        """Verifica si existe un exploit para un CVE en Metasploit"""
        print(f"[*] Verificando exploit para {cve_id} en {target_ip}:{port}")
        
        # Crear un script temporal de Metasploit
        with tempfile.NamedTemporaryFile(delete=False, mode='w', suffix='.rc') as temp_file:
            script_path = temp_file.name
            temp_file.write(f"search cve:{cve_id}\n")
            temp_file.write("exit\n")
        
        try:
            # Ejecutar Metasploit con el script
            command = [
                self.metasploit_path,
                '-q',
                '-r', script_path
            ]
            
            result = subprocess.run(
                command,
                capture_output=True,
                text=True,
                timeout=120
            )
            
            # Buscar resultados
            exploits = []
            for line in result.stdout.split('\n'):
                if re.match(r'^\d+\s+exploit', line):
                    parts = re.split(r'\s{2,}', line)
                    if len(parts) >= 3:
                        exploits.append({
                            'name': parts[1],
                            'disclosure_date': parts[2],
                            'rank': parts[3],
                            'description': parts[4] if len(parts) > 4 else ''
                        })
            
            return {
                'cve': cve_id,
                'exploits': exploits
            }
            
        except Exception as e:
            print(f"[-] Error al verificar exploit: {str(e)}")
            return {}
        finally:
            if os.path.exists(script_path):
                os.remove(script_path)
